apply plugin: 'com.android.application'
// Firebase performance monitoring plugin.
apply plugin: 'com.google.firebase.firebase-perf'
// For Crashlytics
apply plugin: 'io.fabric'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId 'app.tasknearby.yashcreations.com.tasknearby'
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 17
        versionName "4.0.4"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        debug {
            // to allow debug and release both to be installed on device.
            // also, a different icon will be set for debug (see project structure).
            applicationIdSuffix '.debug'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {}
    // For Java 8 compatibility.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

def supportLibVersion = "28.0.0"
def playServicesVersion = "16.0.0"
def firebaseCoreVersion = "16.0.6"
def firebasePerfVersion = "16.2.2"
def firebaseMessagingVersion = "17.3.4"
def archRoomVersion = "1.1.1"
def jodaTimeVersion = "2.9.9.1"
def constraintLayoutVersion = "2.0.0-alpha2"
def picassoVersion = "2.5.2"
def billingLibVersion = "1.0"
def crashlyticsVersion = "2.9.7"
def lifecycleExtVersion = "1.1.1"

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    implementation "com.android.support:cardview-v7:$supportLibVersion"
    implementation "com.android.support:gridlayout-v7:$supportLibVersion"
    implementation "com.android.support:design:$supportLibVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    implementation "com.google.android.gms:play-services-location:$playServicesVersion"
    implementation "com.google.android.gms:play-services-maps:$playServicesVersion"
    implementation "com.google.android.gms:play-services-places:$playServicesVersion"

    implementation "com.google.firebase:firebase-core:$firebaseCoreVersion"
    implementation "com.google.firebase:firebase-perf:$firebasePerfVersion"
    implementation "com.google.firebase:firebase-messaging:$firebaseMessagingVersion"

    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"

    // Room
    implementation "android.arch.persistence.room:runtime:$archRoomVersion"

    annotationProcessor "android.arch.persistence.room:compiler:$archRoomVersion"

    // LiveData and ViewModel
    implementation "android.arch.lifecycle:extensions:$lifecycleExtVersion"
    // Default
//    annotationProcessor "android.arch.lifecycle:compiler:$archRoomVersion"
    // Recommended with Java 8
    implementation "android.arch.lifecycle:common-java8:$archRoomVersion"

    // Joda-time
    implementation "net.danlew:android.joda:$jodaTimeVersion"

    // Annotations
    implementation "com.android.support:support-annotations:$supportLibVersion"

    implementation "com.squareup.picasso:picasso:$picassoVersion"

    implementation "com.android.billingclient:billing:$billingLibVersion"

    dependencies {
        implementation 'com.github.TouchBoarder:weekdays-buttons-bar:v1.0.2'
    }
}

// this has to be kept after the dependency block to avoid dependency collisions.
apply plugin: 'com.google.gms.google-services'

/**
 * Code quality checks.
 */
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

// Performs checkstyle checks.
// https://tinyurl.com/ybf2p648
task checkstyleCheck(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    classpath = files()
    source 'src/main'
    include '**/*.java'
    exclude '**/gen/**'
    // to fail the build when checkstyle is not passed.
    ignoreFailures true
    showViolations true
}

/**
 * Read more about findbugs in android project from these links:
 * https://stackoverflow.com/a/30068813/4857588
 * https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugs.html
 */
task customFindbugs(type: FindBugs, dependsOn: assemble) {
    ignoreFailures true
    effort "default"
    reportLevel "medium"
    excludeFilter = new File("${project.rootDir}/config/findbugs/findbugs-exclude-filter.xml")
    classes = files("${project.projectDir}/build/intermediates/classes")
    source = fileTree("src/main/java/")
    classpath = files()
    reports {
        xml.enabled false
        html.enabled true
        html {
            setDestination(new File("${project.buildDir}/findbugs/findbugs-output.html"))
        }
    }
}

check.dependsOn checkstyleCheck
check.dependsOn customFindbugs
customFindbugs.shouldRunAfter checkstyleCheck // because checkstyle runs faster.

